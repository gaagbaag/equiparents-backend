// src/auth/authService.js
import bcrypt from "bcryptjs";
import { prisma } from "../config/database.js";

/**
 * üîç Autentica a un usuario y valida su contrase√±a (si usaras login local)
 */
export const authenticateUser = async (email, password) => {
  const user = await prisma.user.findUnique({
    where: { email },
    include: { role: true },
  });

  if (!user) return null;

  const isMatch = await bcrypt.compare(password, user.password);
  return isMatch ? user : null;
};
/**
 * üîÑ Refresca el token JWT si es v√°lido.
 * @param {String} token - Token expirado o a punto de expirar
 * @returns {String|null} Nuevo token o null si es inv√°lido
 */
export const refreshAuthToken = (token) => {
  // Este m√©todo puede seguir siendo √∫til si implementas un flujo de refresh tokens manualmente,
  // pero no es obligatorio para `express-oauth2-jwt-bearer` ya que ese flujo est√° gestionado por OAuth2.
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    return generateToken({
      id: decoded.userId,
      email: decoded.email,
      role: decoded.role,
    });
  } catch (error) {
    console.warn("‚ö†Ô∏è Intento de refresco con token inv√°lido:", error.message);
    return null; // ‚ùå Token inv√°lido o expirado
  }
};
