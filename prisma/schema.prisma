generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  auth0Id           String           @unique
  email             String           @unique
  name              String
  firstName         String?
  lastName          String?
  phone             String?
  countryCode       String?
  countryDialCode   String?
  roleId            String
  role              Role             @relation(fields: [roleId], references: [id])
  parentalAccountId String?
  parentalAccount   ParentalAccount? @relation(fields: [parentalAccountId], references: [id])

  address           Address?
  invitationsSent   Invitation[] @relation("InvitationsSentByUser")
  createdEvents     Event[]      @relation("CreatedEvents")
  expenses          Expense[]
  histories         History[]
  points            GamificationPoint[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id               String  @id @default(cuid())
  userId           String  @unique
  country          String
  state            String?
  city             String
  zipCode          String?
  street           String?
  number           String?
  departmentNumber String?

  user             User    @relation(fields: [userId], references: [id])
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model ParentalAccount {
  id        String  @id @default(cuid())
  name      String
  finalized Boolean @default(false)

  users       User[]
  children    Child[]
  invitations Invitation[]
  calendar    Calendar?
  expenses    Expense[]
  histories   History[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Child {
  id                String          @id @default(cuid())
  firstName         String
  lastName          String?
  birthDate         DateTime?
  email             String?
  phone             String?
  parentalAccountId String
  parentalAccount   ParentalAccount @relation(fields: [parentalAccountId], references: [id])

  // Añadir el campo de relación opuesta con `@relation("EventChildren")`
  events            Event[]    @relation("EventChildren") 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invitation {
  id         String    @id @default(cuid())
  code       String    @unique
  email      String
  firstName  String
  expiresAt  DateTime
  acceptedAt DateTime?
  canceledAt DateTime?

  invitedById String
  invitedBy   User   @relation("InvitationsSentByUser", fields: [invitedById], references: [id])

  parentalAccountId String
  parentalAccount   ParentalAccount @relation(fields: [parentalAccountId], references: [id])

  createdAt DateTime @default(now())
}

model Calendar {
  id                String          @id @default(cuid())
  parentalAccountId String          @unique
  parentalAccount   ParentalAccount @relation(fields: [parentalAccountId], references: [id])
  events            Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  start       DateTime
  end         DateTime
  location    String?
  status      String   @default("pending")

  calendarId  String
  createdById String

  calendar    Calendar   @relation(fields: [calendarId], references: [id])
  createdBy   User       @relation("CreatedEvents", fields: [createdById], references: [id])

  children    Child[]    @relation("EventChildren")
  
  tags        Tag[]      @relation("EventTags")
  metrics     Metric[]   @relation("EventMetrics")
  categoryId  String?
  category    EventCategory? @relation(fields: [categoryId], references: [id])
}

model Expense {
  id                String   @id @default(cuid())
  amount            Float
  title             String
  date              DateTime
  userId            String
  parentalAccountId String

  user            User            @relation(fields: [userId], references: [id])
  parentalAccount ParentalAccount @relation(fields: [parentalAccountId], references: [id])

  tags        Tag[]         @relation("ExpenseTags")
  metrics     Metric[]      @relation("ExpenseMetrics")
  categoryId  String?
  category    ExpenseCategory? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model History {
  id                String  @id @default(cuid())
  parentalAccountId String
  userId            String
  type              String
  summary           String
  ip                String?
  userAgent         String?

  parentalAccount ParentalAccount @relation(fields: [parentalAccountId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
  categoryId      String?
  category        HistoryCategory? @relation(fields: [categoryId], references: [id])
  tags            Tag[]            @relation("HistoryTags")

  createdAt DateTime @default(now())
}

model Tag {
  id         String  @id @default(cuid())
  name       String
  appliesTo  String

  events     Event[]   @relation("EventTags")
  expenses   Expense[] @relation("ExpenseTags")
  histories  History[] @relation("HistoryTags")
}

model EventCategory {
  id     String @id @default(cuid())
  name   String
  color  String?
  icon   String?
  events Event[]
}

model ExpenseCategory {
  id       String @id @default(cuid())
  name     String
  color    String?
  icon     String?
  expenses Expense[]
}

model HistoryCategory {
  id       String   @id @default(cuid())
  name     String
  color    String?
  icon     String?
  histories History[]
}

model Metric {
  id         String   @id @default(cuid())
  name       String
  key        String   @unique
  appliesTo  String
  description String?
  chartType  String?

  events     Event[]   @relation("EventMetrics")
  expenses   Expense[] @relation("ExpenseMetrics")
}

model GamificationPoint {
  id         String   @id @default(cuid())
  userId     String
  action     String
  points     Int
  weight     Float?
  source     String?
  comment    String?
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
}
