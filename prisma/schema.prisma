generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  auth0Id           String              @unique
  email             String              @unique
  name              String
  firstName         String?
  lastName          String?
  phone             String?
  countryCode       String?
  countryDialCode   String?
  roleId            String
  role              Role                @relation(fields: [roleId], references: [id])
  parentalAccountId String?
  parentalAccount   ParentalAccount?    @relation(fields: [parentalAccountId], references: [id])
  address           Address?
  invitationsSent   Invitation[]        @relation("InvitationsSentByUser")
  createdEvents     Event[]             @relation("CreatedEvents")
  googleRefreshToken  String?  
  googleCalendarId    String?  
  expenses          Expense[]
  histories         History[]
  points            GamificationPoint[]
  parentsOnEvents   EventOnParents[]    @relation("UserOnParents")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Address {
  id               String  @id @default(cuid())
  userId           String  @unique
  country          String
  state            String?
  city             String
  zipCode          String?
  street           String?
  number           String?
  departmentNumber String?
  user             User    @relation(fields: [userId], references: [id])
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model ParentalAccount {
  id          String       @id @default(cuid())
  name        String
  finalized   Boolean      @default(false)
  users       User[]
  children    Child[]
  invitations Invitation[]
  calendar    Calendar?
  expenses    Expense[]
  histories   History[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Child {
  id                String            @id @default(cuid())
  firstName         String
  lastName          String?
  birthDate         DateTime?
  email             String?
  phone             String?
  parentalAccountId String
  parentalAccount   ParentalAccount   @relation(fields: [parentalAccountId], references: [id])
  events            EventOnChildren[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Invitation {
  id                String          @id @default(cuid())
  code              String          @unique
  email             String
  firstName         String
  expiresAt         DateTime
  acceptedAt        DateTime?
  canceledAt        DateTime?
  invitedById       String
  invitedBy         User            @relation("InvitationsSentByUser", fields: [invitedById], references: [id])
  parentalAccountId String
  parentalAccount   ParentalAccount @relation(fields: [parentalAccountId], references: [id])
  createdAt         DateTime        @default(now())
}

model Calendar {
  id                String          @id @default(cuid())
  parentalAccountId String          @unique
  parentalAccount   ParentalAccount @relation(fields: [parentalAccountId], references: [id])
  events            Event[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Event {
  id             String            @id @default(cuid())
  title          String
  description    String?
  start          DateTime
  end            DateTime
  location       String?
  status         String            @default("pending")
  timezone       String?
  recurrenceRule String?
  meetingLink    String?
  calendarId     String
  createdById    String
  calendar       Calendar          @relation(fields: [calendarId], references: [id])
  createdBy      User              @relation("CreatedEvents", fields: [createdById], references: [id])
  children       EventOnChildren[]
  tags           Tag[]             @relation("EventTags")
  metrics        Metric[]          @relation("EventMetrics")
  categoryId     String?
  category       Category?         @relation(fields: [categoryId], references: [id])
  parents        EventOnParents[]  @relation("EventOnParents")
  reminders      Reminder[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model EventOnChildren {
  id      String @id @default(cuid())
  eventId String
  childId String
  event   Event  @relation(fields: [eventId], references: [id])
  child   Child  @relation(fields: [childId], references: [id])
}

model EventOnParents {
  id         String   @id @default(cuid())
  eventId    String
  userId     String
  hoursSpent Float?
  event      Event    @relation("EventOnParents", fields: [eventId], references: [id])
  user       User     @relation("UserOnParents", fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model Reminder {
  id            String @id @default(cuid())
  eventId       String
  type          String
  minutesBefore Int
  event         Event  @relation(fields: [eventId], references: [id])
}

model Expense {
  id                String          @id @default(cuid())
  amount            Float
  title             String
  date              DateTime
  userId            String
  parentalAccountId String
  user              User            @relation(fields: [userId], references: [id])
  parentalAccount   ParentalAccount @relation(fields: [parentalAccountId], references: [id])
  tags              Tag[]           @relation("ExpenseTags")
  metrics           Metric[]        @relation("ExpenseMetrics")
  categoryId        String?
  category          Category?       @relation(fields: [categoryId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model History {
  id                String          @id @default(cuid())
  parentalAccountId String
  userId            String
  type              String
  summary           String
  ip                String?
  userAgent         String?
  parentalAccount   ParentalAccount @relation(fields: [parentalAccountId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
  categoryId        String?
  category          Category?       @relation(fields: [categoryId], references: [id])
  tags              Tag[]           @relation("HistoryTags")
  createdAt         DateTime        @default(now())
}

model Category {
  id        String    @id @default(cuid())
  name      String
  type      String
  color     String?
  icon      String?
  events    Event[]
  expenses  Expense[]
  histories History[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  appliesTo String
  events    Event[]   @relation("EventTags")
  expenses  Expense[] @relation("ExpenseTags")
  histories History[] @relation("HistoryTags")
}

model Metric {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  appliesTo   String
  description String?
  chartType   String?
  events      Event[]   @relation("EventMetrics")
  expenses    Expense[] @relation("ExpenseMetrics")
}

model GamificationPoint {
  id        String   @id @default(cuid())
  userId    String
  action    String
  points    Int
  weight    Float?
  source    String?
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
